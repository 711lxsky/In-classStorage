
《数据库系统》上机报告：

学籍管理数据库系统









姓名： 赵宇阳

学号： 22009200439

指导老师： 赵亮 马智




一、	需求分析
1.	系统数据结构
(1)	专业（Major）
(2)	班级（Class）
(3)	学生（Student）
(4)	课程（Course）
(5)	教学计划（Curriculum）
(6)	成绩（Grades）
(7)	教师（Teacher）
(8)	授课安排（Teaching）
2.	系统功能
(1)	专业管理
添加、修改、删除专业信息。
查询专业列表及其详细信息。
(2)	班级管理
添加、修改、删除班级信息。
查询班级列表及其详细信息，包括所属专业和入学年份。
(3)	学生管理
添加、修改、删除学生信息。
查询学生列表及其详细信息，包括所属班级、性别和出生日期。
学生学籍状态管理，包括正常、留级、退学等。
(4)	课程管理
添加、修改、删除课程信息。
查询课程列表及其详细信息，包括课程名称和学分。
(5)	教学计划管理
添加、修改、删除教学计划信息。
查询教学计划列表及其详细信息，包括所属专业、课程、授课学期和课程性质。

(6)	成绩管理
录入、修改、删除学生成绩。
查询学生成绩列表及其详细信息，包括学生、课程和分数。
计算学生的总学分、必修课和选修课的不及格学分，并根据规则判断是否需要开除。
(7)	教师管理
添加、修改、删除教师信息。
查询教师列表及其详细信息，包括教师姓名。
(8)	课程安排管理
添加、修改、删除授课安排信息。
查询授课安排列表及其详细信息，包括教师、班级和课程。
(9)	系统设置
用户权限管理。
数据备份与恢复。
二、	概念结构设计
E-R图设计：
 

三、	逻辑结构设计
1.	实体
(1)	专业（Major）
MajorID：专业编号，主键。
MajorName：专业名称。
(2)	班级（Class）
ClassID：班级编号，主键。
ClassName：班级名称。
MajorID：所属专业的编号，外键。
Year：入学年份。
(3)	学生（Student）
StudentID：学生编号，主键。
Name：学生姓名。
Gender：性别。
BirthDate：出生日期。
ClassID：所属班级的编号，外键。
(4)	课程（Course）
CourseID：课程编号，主键。
CourseName：课程名称。
Credits：学分。
(5)	教学计划（Curriculum）
CurriculumID：教学计划编号，主键。
MajorID：所属专业的编号，外键。
CourseID：课程编号，外键。
Semester：授课学期。
CourseType：课程性质（必修或选修）。
(6)	成绩（Grades）
GradeID：成绩编号，主键。
StudentID：学生编号，外键。
CourseID：课程编号，外键。
Score：分数。
(7)	教师（Teacher）
TeacherID：教师编号，主键。
TeacherName：教师姓名。
(8)	授课安排（Teaching）
TeachingID：授课安排编号，主键。
TeacherID：教师编号，外键。
ClassID：班级编号，外键。
CourseID：课程编号，外键。

2.	关系
(1)	Class-Major（班级与专业的关联）
一个班级属于一个专业（1:N）
(2)	Curriculum-Major（课程计划与专业的关联）
一个专业有多个课程计划（1:N）
(3)	Curriculum-Course（课程计划与课程的关联）
一个课程计划包含一个课程（1:1）
(4)	Grades-Student（成绩与学生的关联）
一个学生成绩对应一个学生（1:1）
(5)	Grades-Course（成绩与课程的关联）
一个学生成绩对应一个课程（1:1）
(6)	Student-Class（学生与班级的关联）
一个学生属于一个班级（1:1）
(7)	Teaching-Teacher（教学安排与教师的关联）
一个教学安排对应一个教师（1:1）
(8)	Teaching-Class（教学安排与班级的关联）
一个教学安排对应一个班级（1:1）
(9)	Teaching-Course（教学安排与课程的关联）
一个教学安排对应一个课程（1:1）
四、	功能实现
1.	选用的DBMS：
DBMS: MySQL (版本 9.0.1)  
区分大小写: 普通形式=lower，分隔形式=lower 
驱动程序: MySQL Connector/J (版本 mysql-connector-j-8.2.0 
(Revision: 06a1f724497fd81c6a659131fda822c9e5085b6c)，JDBC4.2)
2.	建表语句：
(1)	Class
 
(2)	Course
 
(3)	Curriculum
 
(4)	Grades
 
(5)	Major
 
(6)	Student
 
(7)	Teacher
 
(8)	Teaching
 
3.	针对问题编写的SQL以及对应的运行结果
(1)	录入一位学生，应包含学号、姓名、性别、出生年月、班级等信息
SQL语句:
 
执行结果：
 
(2)	按学号、姓名、专业三种方式查询学生基本信息
SQL语句：
 
执行结果：
 
 
 
(3)	录入一位学生一门课的成绩
SQL语句：
 
执行结果：
 
(4)	查询一位学生所修的课程、性质（必修或选修）、学期、学分及成绩；查询他的必修课平均成绩、所有课程平均成绩（平均成绩应按学分加权）
SQL语句：
 
执行结果：
 
 
(5)	查询一位学生被哪些教师教过课
SQL语句：
 
执行结果：
 
(6)	查询快要被开除的学生（距被开除差3学分之内）
SQL语句：
 
执行结果：
 

五、	遇到的主要问题及解决方法
问题描述：
在编写查询快要被开除的学生的SQL语句过程中，最初尝试直接通过Grades表与Course表、Student表以及Curriculum表进行连接，并筛选出成绩低于60分且课程类型为“必修”或“选修”的记录。然而，在计算学生的累计失败学分时发现结果不准确，具体表现为某些学生的累计失败学分数值偏低或偏高。经过初步排查，怀疑是由于某些学生在多个学期选修了同一门课程，导致成绩记录重复计算，进而影响了最终的统计结果。
解决方法：
为了解决上述问题，采取了以下措施：
1.	去重处理：在计算每个学生的累计失败学分之前，先对成绩记录进行去重处理，确保每门课程的成绩只被计算一次。
2.	分组统计：分别针对“必修”和“选修”课程进行分组统计，确保不同类型的课程按照不同的标准进行累计。
3.	条件筛选：在HAVING子句中增加了具体的条件限制，确保只有累计失败学分在指定范围内的学生才会被选中。
